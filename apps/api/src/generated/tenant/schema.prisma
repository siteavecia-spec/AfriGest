// Prisma schema for Tenant DB (per company)
// --- AFRITALK (Phase 4.2) ---
model Conversation {
  id        String   @id @default(uuid())
  tenantId  String
  userOneId String
  userTwoId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  messages  Message[]

  @@unique([tenantId, userOneId, userTwoId])
}

model Message {
  id                String       @id @default(uuid())
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  conversationId    String
  senderId          String
  content           String
  relatedEntityType String?
  relatedEntityId   String?
  read              Boolean      @default(false)
  readAt            DateTime?
  createdAt         DateTime     @default(now())
}

model Notification {
  id               String   @id @default(uuid())
  userId           String
  title            String
  message          String
  type             String
  status           String   @default("unread")
  relatedEntityType String?
  relatedEntityId   String?
  pushSent         Boolean  @default(false)
  pushSentAt       DateTime?
  createdAt        DateTime @default(now())
}

model MessagingAuditLog {
  id         String   @id @default(uuid())
  tenantId   String
  userId     String?
  action     String
  entityType String?
  entityId   String?
  details    Json?
  ipAddress  String?
  createdAt  DateTime @default(now())
}


generator client {
  provider = "prisma-client-js"
  output   = "../../../apps/api/src/generated/tenant"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  passwordHash        String
  fullName            String
  role                Role
  status              String       @default("active")
  lastLoginAt         DateTime?
  sales               Sale[]
  stockEntriesCreated StockEntry[]
}

enum Role {
  super_admin
  pdg
  dg
  employee
}

model Boutique {
  id      String  @id @default(uuid())
  name    String
  code    String  @unique
  address String?
  city    String?
  country String?
  stocks  Stock[]
  sales   Sale[]
}

model Product {
  id              String           @id @default(uuid())
  sku             String           @unique
  name            String
  category        String?
  price           Decimal          @db.Decimal(10, 2)
  cost            Decimal          @db.Decimal(10, 2)
  barcode         String?
  taxRate         Decimal          @db.Decimal(5, 2)
  isActive        Boolean          @default(true)
  stocks          Stock[]
  saleItems       SaleItem[]
  stockEntryItems StockEntryItem[]
}

model Stock {
  id         String   @id @default(uuid())
  boutique   Boutique @relation(fields: [boutiqueId], references: [id])
  boutiqueId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int

  @@unique([boutiqueId, productId])
}

model Supplier {
  id          String       @id @default(uuid())
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  entries     StockEntry[]
}

model StockEntry {
  id              String           @id @default(uuid())
  supplier        Supplier?        @relation(fields: [supplierId], references: [id])
  supplierId      String?
  reference       String?
  createdBy       User             @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  createdAt       DateTime         @default(now())
  items           StockEntryItem[]
}

model StockEntryItem {
  id           String     @id @default(uuid())
  stockEntry   StockEntry @relation(fields: [stockEntryId], references: [id])
  stockEntryId String
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
  unitCost     Decimal    @db.Decimal(10, 2)
}

model Sale {
  id            String     @id @default(uuid())
  boutique      Boutique   @relation(fields: [boutiqueId], references: [id])
  boutiqueId    String
  cashier       User       @relation(fields: [cashierUserId], references: [id])
  cashierUserId String
  total         Decimal    @db.Decimal(10, 2)
  paymentMethod String
  currency      String     @default("GNF")
  createdAt     DateTime   @default(now())
  offlineId     String?    @unique
  status        String     @default("completed")
  items         SaleItem[]
  payments      Payment[]
}

model SaleItem {
  id        String  @id @default(uuid())
  sale      Sale    @relation(fields: [saleId], references: [id])
  saleId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  discount  Decimal @default(0) @db.Decimal(10, 2)
}

model Payment {
  id        String  @id @default(uuid())
  sale      Sale    @relation(fields: [saleId], references: [id])
  saleId    String
  method    String
  amount    Decimal @db.Decimal(10, 2)
  reference String?
}

model AuditLog {
  id         String   @id @default(uuid())
  actorId    String?
  role       String?
  action     String
  resource   String
  resourceId String?
  metadata   Json?
  ip         String?
  createdAt  DateTime @default(now())
}

// --- E-COMMERCE (Phase 1 -> Prisma persistence) ---
model EcommerceCustomer {
  id         String           @id @default(uuid())
  email      String?          @unique
  phone      String?
  firstName  String?
  lastName   String?
  createdAt  DateTime         @default(now())
  orders     EcommerceOrder[]
}

model EcommerceOrder {
  id            String               @id @default(uuid())
  customer      EcommerceCustomer?   @relation(fields: [customerId], references: [id])
  customerId    String?
  status        String               @default("received") // received|prepared|shipped|delivered|returned
  total         Decimal              @db.Decimal(12, 2)
  currency      String               @default("GNF")
  createdAt     DateTime             @default(now())
  items         EcommerceOrderItem[]
  payments      EcommercePayment[]
  paymentStatus String               @default("unpaid")  // unpaid|pending|paid|failed|refunded
}

model EcommerceOrderItem {
  id        String          @id @default(uuid())
  order     EcommerceOrder  @relation(fields: [orderId], references: [id])
  orderId   String
  sku       String
  quantity  Int
  price     Decimal         @db.Decimal(12, 2)
  currency  String          @default("GNF")
}

model EcommercePayment {
  id               String          @id @default(uuid())
  order            EcommerceOrder  @relation(fields: [orderId], references: [id])
  orderId          String
  provider         String          // stripe|paypal|mtn_momo|orange_momo|cod
  status           String          @default("pending") // pending|succeeded|failed|refunded
  amount           Decimal         @db.Decimal(12, 2)
  currency         String          @default("GNF")
  providerIntentId String?
  receiptUrl       String?
  createdAt        DateTime        @default(now())
}

model EcommerceWebhookEvent {
  id          String   @id @default(uuid())
  provider    String   // stripe|...
  eventType   String
  payload     Json
  status      String   @default("received") // received|processed|failed
  attempts    Int      @default(0)
  nextRetryAt DateTime?
  createdAt   DateTime @default(now())
}
