openapi: 3.0.3
info:
  title: AfriGest Admin & Partners API (Skeleton)
  version: 0.1.0
servers:
  - url: https://api.example.com
paths:
  /admin/companies:
    get:
      summary: List companies (master)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
    post:
      summary: Create company (master)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code: { type: string }
                name: { type: string }
                contactEmail: { type: string }
      responses:
        '201':
          description: Created
  /api/tenants/{tenantId}/ecommerce/overview:
    get:
      summary: E-commerce KPIs overview for a period
      description: |
        Returns aggregated KPIs for the e-commerce module over a date range.
        If the tenant has no dedicated e-commerce store, returns an empty structure (fallback-compatible).
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tenantId
          required: true
          schema: { type: string }
        - in: query
          name: from
          required: true
          schema: { type: string, pattern: "^\\d{4}-\\d{2}-\\d{2}$" }
          description: Start date (inclusive) in YYYY-MM-DD
        - in: query
          name: to
          required: true
          schema: { type: string, pattern: "^\\d{4}-\\d{2}-\\d{2}$" }
          description: End date (inclusive) in YYYY-MM-DD
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  from: { type: string, example: '2025-09-01' }
                  to: { type: string, example: '2025-09-27' }
                  periodTotals:
                    type: object
                    properties:
                      count: { type: integer, example: 42 }
                      revenue: { type: number, example: 1250000 }
                      payments:
                        type: object
                        additionalProperties: { type: number }
                  dailySeries:
                    type: array
                    items:
                      type: object
                      properties:
                        date: { type: string, example: '2025-09-15' }
                        count: { type: integer }
                        revenue: { type: number }
                  topProducts:
                    type: array
                    items:
                      type: object
                      properties:
                        sku: { type: string }
                        quantity: { type: number }
                        revenue: { type: number }
        '400':
          description: Invalid or missing from/to
        '500':
          description: Server error
  /api/tenants/{tenantId}/ecommerce/payments/stripe/intent:
    post:
      summary: Create Stripe PaymentIntent (stub)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tenantId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                  type: object
                  properties:
                    email: { type: string }
                    phone: { type: string }
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      sku: { type: string }
                      quantity: { type: integer, minimum: 1 }
                      price: { type: number, minimum: 0 }
                      currency: { type: string, example: GNF }
      responses:
        '202':
          description: Stub accepted (or clientSecret when implemented)
        '501':
          description: Stripe not configured

  /api/tenants/{tenantId}/ecommerce/payments/paypal/order:
    post:
      summary: Create PayPal order (stub)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tenantId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      sku: { type: string }
                      quantity: { type: integer, minimum: 1 }
                      price: { type: number, minimum: 0 }
                      currency: { type: string }
      responses:
        '202':
          description: Stub accepted
        '501':
          description: PayPal not configured

  /api/tenants/{tenantId}/ecommerce/payments/mtn/init:
    post:
      summary: Initialize MTN MoMo collection (stub)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tenantId
          required: true
          schema: { type: string }
      responses:
        '202':
          description: Stub accepted
        '501':
          description: MTN MoMo not configured

  /api/tenants/{tenantId}/ecommerce/payments/orange/init:
    post:
      summary: Initialize Orange MoMo collection (stub)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tenantId
          required: true
          schema: { type: string }
      responses:
        '202':
          description: Stub accepted
        '501':
          description: Orange MoMo not configured
  /partners/keys:
    get:
      summary: List API keys (Partners)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
    post:
      summary: Create API key (Partners)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label: { type: string }
                scopes:
                  type: array
                  items: { type: string, example: "products:read" }
                expiresInDays: { type: integer, minimum: 1, maximum: 365 }
      responses:
        '201':
          description: Created
  /partners/keys/{id}:
    delete:
      summary: Revoke API key (Partners)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: No Content
  /admin/companies/{id}:
    patch:
      summary: Update company (master)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
    delete:
      summary: Archive company (master)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: No Content
  /admin/impersonate:
    post:
      summary: Impersonate into a tenant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyCode: { type: string }
      responses:
        '200':
          description: OK
  /api/v1/partners/products:
    get:
      summary: List products (partners)
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: OK
  /api/v1/partners/stock/summary:
    get:
      summary: Stock summary by boutique (partners)
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: OK
  /transfers:
    get:
      summary: List transfers (in-memory MVP or Prisma-backed)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
    post:
      summary: Create a transfer draft
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceBoutiqueId: { type: string }
                destBoutiqueId: { type: string }
                reference: { type: string }
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId: { type: string }
                      quantity: { type: integer, minimum: 1 }
      responses:
        '201':
          description: Created
  /transfers/{id}/send:
    post:
      summary: Send transfer (decrement source stock, status -> in_transit)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
  /transfers/{id}/receive:
    post:
      summary: Receive transfer (increment dest stock, status -> received)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
  /inventory/summary:
    get:
      summary: Inventory summary for a boutique
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: boutiqueId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
  /inventory/sessions:
    post:
      summary: Create an inventory session and compute variance
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                boutiqueId: { type: string }
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId: { type: string }
                      counted: { type: number }
                      unitPrice: { type: number }
      responses:
        '201':
          description: Created
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

tags:
  - name: partners
    description: |
      Partners API uses API keys (`x-api-key`) with scoped access and rate limiting.
      Rate limiting: 429 responses include `Retry-After` header (seconds) to backoff.
      Recommended scopes examples: `products:read`, `stock:read`, `sales:read_aggregate`.
